using System;
using System.Collections.Generic;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Prototypes;
using Robust.Client.UserInterface;
using System.Linq;
using Content.Client.Stylesheets;
namespace Content.Client.PlayingCard.UI
{
    [GenerateTypedNameReferences]
    public partial class PlayingCardHandMenu : DefaultWindow
    {
        [Dependency] private readonly IResourceCache _resourceCache = default!;
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

        private PlayingCardHandBoundUserInterface Owner { get; }

        private List<String> _cachedCardList = new();

        private int _cardOffset = 0;

        public PlayingCardHandMenu(PlayingCardHandBoundUserInterface owner)
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            Owner = owner;
            // VendingContents.OnItemSelected += ItemSelected;

            // GRAB SPRITES
            // EntityView.Sprite = IoCManager.Resolve<IEntityManager>().GetComponent<SpriteComponent>(component.Owner);
        }

        public void Populate(List<String> cards)
        {
            // VendingContents.Clear();
            // _cachedCardList = cards;
            // var longestEntry = "";
            // foreach (string entry in cards)
            // {
            //     var itemName = _prototypeManager.Index<EntityPrototype>(entry.ID).Name;
            //     if (itemName.Length > longestEntry.Length)
            //         longestEntry = itemName;

            //     Texture? icon = null;
            //     if(_prototypeManager.TryIndex(entry.ID, out EntityPrototype? prototype))
            //         icon = SpriteComponent.GetPrototypeIcon(prototype, _resourceCache).Default;

            //     VendingContents.AddItem($"{itemName} [{entry.Amount}]", icon);
            // }

            // SetSize = (Math.Clamp((longestEntry.Length + 2) * 12, 250, 300),
            //     Math.Clamp(VendingContents.Count * 50, 150, 350));
            CardList.Clear();
            List<string> testList = new List<string>
            {
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "20",
                "21",
                "22",
                "23",
                "24",
                "25",
                "26",
                "27",
                "28",
                "29",
                "30",
            };

            _cachedCardList = testList;

            for (int i = _cardOffset; i < _cardOffset + 5; i++)
            {
                if (i > _cachedCardList.Count - 1)
                    continue;
                CardList.AddItem($"{testList[i]}");
            }
            // if (_count == 0 && entities.Count > 0)
            // {
                // EntityContainerButton control = new(entities[0]);
                // control.Measure(Vector2.Infinity);
                // _itemHeight = control.DesiredSize.Y;
                // control.Dispose();
            // }
            // _count = entities.Count;
            // _entityUids = entities;
            // _updateChildren = true;
            // InvalidateArrange();
        }

        protected override void MouseWheel(GUIMouseWheelEventArgs args)
        {
            base.MouseWheel(args);

            Logger.Debug(args.Delta.Y.ToString());
            var newOffset = _cardOffset + args.Delta.Y;
            if ((newOffset < 0) || (newOffset > _cachedCardList.Count - 1))
                return;

            _cardOffset = (int)newOffset;
            Populate(_cachedCardList);
            args.Handle();
        }

        public void ItemSelected(ItemList.ItemListSelectedEventArgs args)
        {
            // Owner.Eject(_cachedCardList[args.ItemIndex].ID);
        }

        public class EntityContainerButton : ContainerButton
    {
        public string CardName;

        public EntityContainerButton(string cardName)
        {
            CardName = cardName;
            AddStyleClass(StyleNano.StyleClassStorageButton);
        }
    }
    }
}
