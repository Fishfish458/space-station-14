using System;
using System.Collections.Generic;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Prototypes;
using Robust.Client.UserInterface;
using System.Linq;
using Content.Client.Stylesheets;
using static Robust.Client.UserInterface.Controls.BaseButton;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.PlayingCard.UI
{
    [GenerateTypedNameReferences]
    public partial class PlayingCardHandMenu : DefaultWindow
    {
        [Dependency] private readonly IResourceCache _resourceCache = default!;
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

        private PlayingCardHandBoundUserInterface Owner { get; }

        private List<String> _cachedCardList = new();

        private int _cardOffset = 0;

        public PlayingCardHandMenu(PlayingCardHandBoundUserInterface owner)
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            Owner = owner;
            IoCManager.Resolve<IResourceCache>();
            // VendingContents.OnItemSelected += ItemSelected;

            // GRAB SPRITES
            // EntityView.Sprite = IoCManager.Resolve<IEntityManager>().GetComponent<SpriteComponent>(component.Owner);
        }

        public void Populate(List<String> testList)
        {
            // VendingContents.Clear();
            // _cachedCardList = cards;
            // var longestEntry = "";
            // foreach (string entry in cards)
            // {
            //     var itemName = _prototypeManager.Index<EntityPrototype>(entry.ID).Name;
            //     if (itemName.Length > longestEntry.Length)
            //         longestEntry = itemName;

            //     Texture? icon = null;
            //     if(_prototypeManager.TryIndex(entry.ID, out EntityPrototype? prototype))
            //         icon = SpriteComponent.GetPrototypeIcon(prototype, _resourceCache).Default;

            //     VendingContents.AddItem($"{itemName} [{entry.Amount}]", icon);
            // }

            // SetSize = (Math.Clamp((longestEntry.Length + 2) * 12, 250, 300),
            //     Math.Clamp(VendingContents.Count * 50, 150, 350));
            // CardList.Clear();
            CardList.RemoveAllChildren();

            _cachedCardList = testList;

            for (int i = _cardOffset; i < _cardOffset + 5; i++)
            {
                if (i > _cachedCardList.Count - 1)
                    continue;

            var button = new CardButton
            {
                CardName = testList[i],
                Index = i // We track this index purely for debugging.
            };

            // var rect = button.EntityTextureRects;
            // rect.Textures = SpriteComponent.GetPrototypeTextures(prototype, resourceCache).Select(o => o.Default).ToList();
                button.ActualButton.OnPressed += OnCardSelected;
                button.CardNameLabel.Text = testList[i];
                CardList.AddChild(button);
            }

            // IF NO CHNAGES, DOnn"T DO ANYTHING, OTHERWISE IF OFFSET CHANGED, DELETE FAR LEFT, AMMEND ONE TO RIGHT.

        }

        private void ShiftCardsLeft()
        {

        }

        private void ShiftCardsRight()
        {

        }

        protected override void MouseWheel(GUIMouseWheelEventArgs args)
        {
            base.MouseWheel(args);

            Logger.Debug(args.Delta.Y.ToString());
            var newOffset = _cardOffset + args.Delta.Y;
            if ((newOffset < 0) || (newOffset > _cachedCardList.Count - 1))
                return;

            _cardOffset = (int)newOffset;
            Populate(_cachedCardList);
            args.Handle();
        }

        private void OnCardSelected(BaseButton.ButtonEventArgs args)
        {
            var item = (CardButton) args.Button.Parent!;
            Owner.RemoveCard(item.Index);
        }

        private sealed class CardButton : Control
        {
            public string CardName { get; set; } = default!;
            public Button ActualButton { get; private set; }
            public Label CardNameLabel { get; private set; }
            public Label DescriptionLabel { get; private set; }
            public LayeredTextureRect EntityTextureRects { get; private set; }
            public int Index { get; set; }

            public CardButton()
            {
                AddChild(ActualButton = new Button
                {
                });

                AddChild(new BoxContainer
                {
                    Orientation = LayoutOrientation.Vertical,
                    MinSize = (100, 50),
                    Children =
                    {
                        (EntityTextureRects = new LayeredTextureRect
                        {
                            MinSize = (32, 32),
                            HorizontalAlignment = HAlignment.Center,
                            VerticalAlignment = VAlignment.Center,
                            Stretch = TextureRect.StretchMode.KeepAspectCentered,
                            CanShrink = true
                        }),
                        (CardNameLabel = new Label
                        {
                            VerticalAlignment = VAlignment.Center,
                            HorizontalAlignment = HAlignment.Center,
                            HorizontalExpand = true,
                            Text = "Backpack",
                        }),
                        (DescriptionLabel = new Label
                        {
                            VerticalAlignment = VAlignment.Center,
                            HorizontalAlignment = HAlignment.Center,
                            HorizontalExpand = true,
                            Text = "A playing card",
                        })
                    }
                });
            }
        }

        public void ItemSelected(ItemList.ItemListSelectedEventArgs args)
        {
            // Owner.Eject(_cachedCardList[args.ItemIndex].ID);
        }

        public class EntityContainerButton : ContainerButton
    {
        public string CardName;

        public EntityContainerButton(string cardName)
        {
            CardName = cardName;
            AddStyleClass(StyleNano.StyleClassStorageButton);
        }
    }
    }
}
