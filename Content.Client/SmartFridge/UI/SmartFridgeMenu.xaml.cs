using System;
using System.Collections.Generic;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Prototypes;
using static Content.Shared.SmartFridge.SharedSmartFridgeComponent;

namespace Content.Client.SmartFridge.UI
{
    [GenerateTypedNameReferences]
    public partial class SmartFridgeMenu : DefaultWindow
    {
        [Dependency] private readonly IResourceCache _resourceCache = default!;
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

        private SmartFridgeBoundUserInterface Owner { get; }

        private List<SmartFridgeInventoryEntry> _cachedInventory = new();

        public SmartFridgeMenu(SmartFridgeBoundUserInterface owner)
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            Owner = owner;
            VendingContents.OnItemSelected += ItemSelected;
        }

        public void Populate(List<SmartFridgeInventoryEntry> inventory)
        {
            VendingContents.Clear();
            _cachedInventory = inventory;
            var longestEntry = "";
            foreach (SmartFridgeInventoryEntry entry in inventory)
            {
                var itemName = entry.Name;
                if (itemName.Length > longestEntry.Length)
                    longestEntry = itemName;

                VendingContents.AddItem($"{itemName} [{entry.Amount}]");
            }

            SetSize = ((250), (350));
        }

        public void ItemSelected(ItemList.ItemListSelectedEventArgs args)
        {
            // attempt eject
            Owner.Eject(_cachedInventory[args.ItemIndex].ID);
        }
    }
}
